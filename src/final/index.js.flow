/* @flow */

/* eslint-disable no-redeclare */

import {O, type $Props} from './helpers'

declare function f<$, A1>(A1): (<T, B>(Base: B) => (
  $Call<$Call<$ComposeReverse, A1, (
    (_: Class<T>) => Class<O<$Props<T>, $Props<T>> & T>
  )>, B>
))
declare function f<$, A1, A2>(A1, A2): (<T, B>(Base: B) => (
  $Call<$Call<$ComposeReverse, A1, A2, (
    (_: Class<T>) => Class<O<$Props<T>, $Props<T>> & T>
  )>, B>
))
declare function f<$, A1, A2, A3>(A1, A2, A3): (<T, B>(Base: B) => (
  $Call<$Call<$ComposeReverse, A1, A2, A3, (
    (_: Class<T>) => Class<O<$Props<T>, $Props<T>> & T>
  )>, B>
))
declare function f<$, A1, A2, A3, A4>(A1, A2, A3, A4): (<T, B>(Base: B) => (
  $Call<$Call<$ComposeReverse, A1, A2, A3, A4, (
    (_: Class<T>) => Class<O<$Props<T>, $Props<T>> & T>
  )>, B>
))
declare function f<$, A1, A2, A3, A4, A5>(A1, A2, A3, A4, A5): (<T, B>(Base: B) => (
  $Call<$Call<$ComposeReverse, A1, A2, A3, A4, A5, (
    (_: Class<T>) => Class<O<$Props<T>, $Props<T>> & T>
  )>, B>
))
declare function f<$, A1, A2, A3, A4, A5, A6>(A1, A2, A3, A4, A5, A6): (<T, B>(Base: B) => (
  $Call<$Call<$ComposeReverse, A1, A2, A3, A4, A5, A6, (
    (_: Class<T>) => Class<O<$Props<T>, $Props<T>> & T>
  )>, B>
))

export default f
